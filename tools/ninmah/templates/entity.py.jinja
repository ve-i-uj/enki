"""Generated module represents the entity "{{ entity_spec.name }}" of the file entities.xml"""

from __future__ import annotations

import io
import logging

from enki import kbetype, kbeclient, kbeentity, descr
from enki.misc import devonly
{% if assets_ent_data.get(entity_spec.name) -%}
{% for type_name in assets_ent_data.get(entity_spec.name).get_uniq_comp_types() %}
from .components.{{ type_name }} import {{ type_name }}Base
{%- endfor %}
{% endif %}
logger = logging.getLogger(__name__)
{%- for component_name, methods in (('Base', entity_spec.base_methods),
                                   ('Cell', entity_spec.cell_methods)) %}


class _{{ entity_spec.name }}{{ component_name }}EntityRemoteCall(kbeentity.BaseEntityRemoteCall):
    """Remote call to the {{ component_name }}App component of the entity."""

    def __init__(self, entity: {{ entity_spec.name }}Base) -> None:
        super().__init__(entity)
        # It's needed for IDE can recoginze the entity type
        self._entity: {{ entity_spec.name }}Base = entity

    {%- for ec_name, ec_type in ec_type_by_name.items() %}

    @property
    def {{ ec_name }}(self) -> {{ ec_type }}Base:
        return self._entity.{{ ec_name }}

    {%- endfor %}
    {%- for md in methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s] %s', self, devonly.func_args_values())
        io_obj = io.BytesIO()
        io_obj.write(kbetype.ENTITY_ID.encode(self._entity.id))
        io_obj.write(kbetype.UINT16.encode(0))  # entitycomponentPropertyID
        io_obj.write(kbetype.ENTITY_METHOD_UID.encode({{ md.uid }}))

        {% if md.arg_types -%}
        {% for t_id in md.arg_types -%}
        io_obj.write(descr.deftype.{{ get_type_name(t_id) }}_SPEC.kbetype.encode({{ get_type_name(t_id).lower() }}_{{ loop.index0 }}))
        {% endfor %}
        {% endif -%}

        msg = kbeclient.Message(
            {% if component_name == 'Base' -%}
            spec=descr.app.baseapp.onRemoteMethodCall,
            {% else -%}
            spec=descr.app.baseapp.onRemoteCallCellMethodFromClient,
            {% endif -%}
            fields=(io_obj.getbuffer().tobytes(), )
        )
        self._entity.__remote_call__(msg)
    {%- endfor %}

{%- endfor %}


class {{ entity_spec.name }}Base(kbeentity.Entity):
    CLS_ID = {{ entity_spec.uid }}

    def __init__(self, entity_id: int, entity_mgr: kbeentity.IEntityMgr):
        super().__init__(entity_id, entity_mgr)
        self._cell = _{{ entity_spec.name }}CellEntityRemoteCall(entity=self)
        self._base = _{{ entity_spec.name }}BaseEntityRemoteCall(entity=self)

        {%- for prop in entity_spec.properties -%}
        {% if prop.name in ec_type_by_name %}
        self._{{ prop.name }}: {{ ec_type_by_name[prop.name] }}Base = {{ ec_type_by_name[prop.name] }}Base(self, own_attr_id={{ prop.uid }})
        {%- elif prop.name == 'position' %}
        self._{{ prop.name }}: kbetype.Position = kbetype.Position(0.0, 0.0, 0.0)
        {%- elif prop.name == 'direction' %}
        self._{{ prop.name }}: kbetype.Direction = kbetype.Direction(0.0, 0.0, 0.0)
        {%- else %}
        self._{{ prop.name }}: {{ get_python_type(prop.typesxml_id) }} = {{ get_default_value(prop.typesxml_id) }}
        {%- endif %}
        {%- endfor %}

    @property
    def cell(self) -> _{{ entity_spec.name }}CellEntityRemoteCall:
        return self._cell

    @property
    def base(self) -> _{{ entity_spec.name }}BaseEntityRemoteCall:
        return self._base

    {%- for prop in entity_spec.properties %}
        {%- set type = '' -%}
    {% if prop.name in ec_type_by_name %}
        {%- set type = ec_type_by_name[prop.name] + 'Base' %}
    {%- elif prop.name == 'position' %}
        {%- set type = 'kbetype.Position' %}
    {%- elif prop.name == 'direction' %}
        {%- set type = 'kbetype.Direction' %}
    {%- else -%}
        {%- set type = get_python_type(prop.typesxml_id) %}
    {%- endif %}

    @property
    def {{ prop.name }}(self) -> {{ type }}:
        return self._{{ prop.name }}

    {%- if prop.need_set_method %}

    def set_{{ prop.name }}(self, old_value: {{ type }}):
        logger.debug('[%s]  (%s)', self, devonly.func_args_values())

    {%- endif -%}
    {%- endfor -%}

    {%- for md in entity_spec.client_methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s]  (%s)', self, devonly.func_args_values())

    {%- endfor %}

