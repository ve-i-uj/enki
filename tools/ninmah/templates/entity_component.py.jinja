from __future__ import annotations

import io
import logging

from enki import kbetype, kbeclient, kbeentity, descr
from enki.misc import devonly
from enki.interface import IEntity

logger = logging.getLogger(__name__)


class {{ entity_spec.name }}Base(kbeentity.EntityComponent):

    def __init__(self, entity: IEntity, own_attr_id: int):
        super().__init__(entity, own_attr_id)

        {%- for prop in entity_spec.properties %}
        self._{{ prop.name }}: {{ get_python_type(prop.typesxml_id) }} = {{ get_default_value(prop.typesxml_id) }}
        {%- endfor -%}

    {%- for prop in entity_spec.properties %}

    @property
    def {{ prop.name }}(self) -> {{ get_python_type(prop.typesxml_id) }}:
        return self._{{ prop.name }}

    {%- if prop.need_set_method %}

    def set_{{ prop.name }}(self, old_value: {{ get_python_type(prop.typesxml_id) }}):
        logger.debug('[%s]  (%s)', self, devonly.func_args_values())

    {%- endif -%}
    {%- endfor -%}

    {%- for md in entity_spec.client_methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s] %s', self, devonly.func_args_values())

    {%- endfor %}

    {%- for component_name, methods in (('base', entity_spec.base_methods),
                                    ('cell', entity_spec.cell_methods)) %}

    {%- for md in methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s] %s', self, devonly.func_args_values())
        io_obj = io.BytesIO()
        io_obj.write(kbetype.ENTITY_ID.encode(self._entity.id))
        io_obj.write(kbetype.UINT16.encode(self._owner_attr_id))  # entitycomponentPropertyID
        io_obj.write(kbetype.ENTITY_METHOD_UID.encode({{ md.uid }}))
        {%- if md.arg_type_names -%}
        {% for arg_type_name in md.arg_type_names -%}
            io_obj.write(descr.deftype.{{ arg_type_name }}_SPEC.kbetype.encode(arg_{{ loop.index0 }}))
        {% endfor %}
        {%- endif %}
        msg = kbeclient.Message(
            {% if component_name == 'base' -%}
            spec=descr.app.baseapp.onRemoteMethodCall,
            {% else -%}
            spec=descr.app.baseapp.onRemoteCallCellMethodFromClient,
            {% endif -%}
            fields=(io_obj.getbuffer().tobytes(), )
        )
        self._entity.__remote_call__(msg)

    {%- endfor %}
    {%- endfor %}

