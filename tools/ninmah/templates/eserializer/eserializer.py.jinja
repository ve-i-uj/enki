"""Generated module represents the entity "{{ entity_spec.name }}" of the file entities.xml"""

from __future__ import annotations

import io
import logging
from functools import cached_property
from typing import Optional

from enki import settings
from enki.misc import devonly
from enki.net import msgspec
from enki.net.kbeclient import kbetype, Message
from enki.net.netentity import EntityBaseRPCSerializer, EntityCellRPCSerializer, \
    IEntityRPCSerializer, EntityComponentRPCSerializer, IEntityRPCSerializer
{% if assets_ent_data.get(entity_spec.name) -%}
{% for type_name in assets_ent_data.get(entity_spec.name).get_uniq_comp_types() %}
from .components.{{ type_name }} import {{ type_name }}ComponentRPCSerializer
{%- endfor %}
{%- endif %}

from ... import deftype

logger = logging.getLogger(__name__)
{%- for component_name, methods in (('Base', entity_spec.base_methods),
                                   ('Cell', entity_spec.cell_methods)) %}


class _{{ entity_spec.name }}{{ component_name }}RPCSerializer(Entity{{ component_name }}RPCSerializer):
    """Serialize a remote call to the entity on a {{ component_name }}App."""

    {%- for md in methods %}

    def {{ md.name }}({{ build_method_args(md) }}) -> Message:
        logger.debug('[%s] %s', self, devonly.func_args_values())
        io_obj = io.BytesIO()
        io_obj.write(kbetype.ENTITY_ID.encode(entity_id))
        io_obj.write(kbetype.UINT16.encode(settings.NO_COMPONENT_PROPERTY_ID))
        io_obj.write(kbetype.ENTITY_METHOD_UID.encode({{ md.uid }}))
{% if md.arg_types -%}
        {%- for t_id in md.arg_types %}
        io_obj.write(deftype.{{ get_type_name(t_id) }}_SPEC.kbetype.encode({{ get_type_name(t_id).lower() }}_{{ loop.index0 }}))
        {%- endfor %}
{% endif %}
        msg = Message(
            {% if component_name == 'Base' -%}
            spec=msgspec.app.baseapp.onRemoteMethodCall,
            {% else -%}
            spec=msgspec.app.baseapp.onRemoteCallCellMethodFromClient,
            {% endif -%}
            fields=(io_obj.getbuffer().tobytes(), )
        )
        return msg
    {%- endfor %}

{%- endfor %}


class {{ entity_spec.name }}RPCSerializer(IEntityRPCSerializer):
    """The serializer RPC of the "{{ entity_spec.name }}" entity."""

    ENTITY_CLS_ID: int = {{ entity_spec.uid }}

    def __init__(self) -> None:
        super().__init__()
        self._cell = _{{ entity_spec.name }}CellRPCSerializer()
        self._base = _{{ entity_spec.name }}BaseRPCSerializer()
{% for prop in entity_spec.properties -%}
        {% if prop.name in ec_type_by_name %}
        self._{{ prop.name }} = {{ ec_type_by_name[prop.name] }}ComponentRPCSerializer(owner_attr_id={{ prop.uid }})
        {%- endif %}
{%- endfor %}

        self._components: dict[str, EntityComponentRPCSerializer] = {
            {%- for ec_name in ec_type_by_name %}
            '{{ ec_name }}': self._{{ ec_name }},
            {%- endfor %}
        }

    @property
    def cell(self) -> _{{ entity_spec.name }}CellRPCSerializer:
        return self._cell

    @property
    def base(self) -> _{{ entity_spec.name }}BaseRPCSerializer:
        return self._base

    {%- for prop in entity_spec.properties -%}
    {%- if prop.name in ec_type_by_name %}

    @property
    def {{ prop.name }}(self) -> {{ ec_type_by_name[prop.name] + 'ComponentRPCSerializer' }}:
        return self._{{ prop.name }}

    {%- endif -%}
    {% endfor %}

