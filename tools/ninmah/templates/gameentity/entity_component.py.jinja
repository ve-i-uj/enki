from __future__ import annotations

import io
import logging

from enki import kbetype, kbeclient, kbeentity, msgspec
from enki.misc import devonly
from enki.interface import IEntity

from .... import deftype
from .. import description

logger = logging.getLogger(__name__)


class {{ entity_spec.name }}Base(kbeentity.EntityComponent):
    CLS_ID = {{ entity_spec.uid }}
    DESCR = description.DESC_BY_UID[CLS_ID]

    def __init__(self, entity: IEntity, own_attr_id: int):
        super().__init__(entity, own_attr_id)

        {%- for prop in entity_spec.properties -%}
        {% if prop.name in ec_type_by_name %}
        self._{{ prop.name }}: {{ ec_type_by_name[prop.name] }}Base = {{ ec_type_by_name[prop.name] }}Base(self, own_attr_id={{ prop.uid }})
        {%- elif prop.name == 'position' %}
        self._{{ prop.name }}: kbetype.Position = kbetype.Position(0.0, 0.0, 0.0)
        {%- elif prop.name == 'direction' %}
        self._{{ prop.name }}: kbetype.Direction = kbetype.Direction(0.0, 0.0, 0.0)
        {%- else %}
        self._{{ prop.name }}: {{ get_python_type(prop.typesxml_id) }} = {{ get_default_value(prop.typesxml_id) }}
        {%- endif %}
        {%- endfor %}

    {%- for prop in entity_spec.properties %}
        {%- set type = '' -%}
    {% if prop.name in ec_type_by_name %}
        {%- set type = ec_type_by_name[prop.name] + 'Base' %}
    {%- elif prop.name == 'position' %}
        {%- set type = 'kbetype.Position' %}
    {%- elif prop.name == 'direction' %}
        {%- set type = 'kbetype.Direction' %}
    {%- else -%}
        {%- set type = get_python_type(prop.typesxml_id) %}
    {%- endif %}

    @property
    def {{ prop.name }}(self) -> {{ type }}:
        return self._{{ prop.name }}

    {%- if prop.need_set_method %}

    def set_{{ prop.name }}(self, old_value: {{ type }}):
        logger.debug('[%s]  (%s)', self, devonly.func_args_values())

    {%- endif -%}
    {%- endfor -%}

    {%- for md in entity_spec.client_methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s] %s', self, devonly.func_args_values())

    {%- endfor %}

    {%- for component_name, methods in (('base', entity_spec.base_methods),
                                    ('cell', entity_spec.cell_methods)) %}

    {%- for md in methods %}

    def {{ md.name }}({{ build_method_args(md) }}):
        logger.debug('[%s] %s', self, devonly.func_args_values())
        io_obj = io.BytesIO()
        io_obj.write(kbetype.ENTITY_ID.encode(self._entity.id))
        io_obj.write(kbetype.UINT16.encode(self._owner_attr_id))  # entitycomponentPropertyID
        io_obj.write(kbetype.ENTITY_METHOD_UID.encode({{ md.uid }}))
        {%- if md.arg_type_names -%}
        {% for arg_type_name in md.arg_type_names -%}
            io_obj.write(deftype.{{ arg_type_name }}_SPEC.kbetype.encode(arg_{{ loop.index0 }}))
        {% endfor %}
        {%- endif %}
        msg = kbeclient.Message(
            {% if component_name == 'base' -%}
            spec=msgspec.app.baseapp.onRemoteMethodCall,
            {% else -%}
            spec=msgspec.app.baseapp.onRemoteCallCellMethodFromClient,
            {% endif -%}
            fields=(io_obj.getbuffer().tobytes(), )
        )
        self._entity.__remote_call__(msg)

    {%- endfor %}
    {%- endfor %}
