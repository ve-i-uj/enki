"""API сущности "{{ entity_info.name }}" сгенерированный по её описанию в {{ entity_info.name }}.def.

See file:///./../../../../scripts/entity_defs/{{ entity_info.name }}.def
"""

from __future__ import annotations

import abc
from typing import Optional

from ..typesxml import *


class IClient{{ entity_info.name }}(abc.ABC):
    """{{ entity_info.doc }} (client component)."""
    {%- for prop in entity_info.get_client_properties() %}
    {{ prop.name }}: {{ type_info_by_name[prop.type].py_type_name }}
    {%- endfor %}

{%- for info in entity_info.ClientMethods %}

    @abc.abstractmethod
    def {{ info.name }}({{ build_method_args(info, type_info_by_name, False) }}):
        {% if info.comment -%}"""{{ info.comment }}."""{% else -%}pass{%- endif %}
{% endfor %}

class IBase{{ entity_info.name }}(abc.ABC):
    """{{ entity_info.doc }} (base component)."""
    {%- for prop in entity_info.get_base_properties() %}
    {{ prop.name }}: {{ type_info_by_name[prop.type].py_type_name }}
    {%- endfor %}

    @property
    def client(self) -> {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

    def cell(self) -> {% if entity_info.CellMethods -%}ICell{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.CellMethods -%}ICell{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

{%- for info in entity_info.BaseMethods %}

    @abc.abstractmethod
    def {{ info.name }}({{ build_method_args(info, type_info_by_name, False) }}):
        {% if info.comment -%}"""{{ info.comment }}."""{% else -%}pass{%- endif %}
{% endfor %}

class ICell{{ entity_info.name }}(abc.ABC):
    """{{ entity_info.doc }} (cell component)."""
    {%- for prop in entity_info.get_cell_properties() %}
    {{ prop.name }}: {{ type_info_by_name[prop.type].py_type_name }}
    {%- endfor %}

    def base(self) -> {% if entity_info.BaseMethods -%}IBase{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.BaseMethods -%}IBase{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

    @property
    def client(self) -> {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

    @property
    def allClients(self) -> {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

    @property
    def otherClients(self) -> {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}{% else -%}None{%- endif %}:
        return {% if entity_info.ClientMethods -%}IClient{{ entity_info.name }}() # type: ignore{% else -%}None{%- endif %}

{% for info in entity_info.CellMethods %}
    @abc.abstractmethod
    def {{ info.name }}({{ build_method_args(info, type_info_by_name, True) }}):
        {% if info.comment -%}"""{{ info.comment }}."""{% else -%}pass{%- endif %}
{% endfor %}
