"""Entity message handlers."""

import logging
from dataclasses import dataclass
from typing import Dict, Any, Optional

from enki import descr, kbeenum, kbetype, kbeclient, dcdescr
from enki import kbeentity, settings
from enki.misc import devonly
from enki.dcdescr import EntityDesc
from enki.interface import IEntity, IKBEClientEntityComponent

from enki.application import entitymgr
from enki.application.apphandler import base

logger = logging.getLogger(__name__)


class _EntityHandler(base.IHandler):

    def __init__(self, entity_mgr: entitymgr.EntityMgr):
        self._entity_mgr = entity_mgr

    def __str__(self) -> str:
        return f'{self.__class__.__name__}()'


# *** onUpdatePropertys ***


@dataclass
class OnUpdatePropertysParsedData(base.ParsedMsgData):
    entity_id: int
    properties: Dict[str, Any]


@dataclass
class OnUpdatePropertysHandlerResult(base.HandlerResult):
    success: bool
    msg_id: int = descr.app.client.onUpdatePropertys.id
    result: Optional[OnUpdatePropertysParsedData] = None
    text: Optional[str] = None


class OnUpdatePropertysHandler(_EntityHandler):

    def handle(self, msg: kbeclient.Message) -> OnUpdatePropertysHandlerResult:
        """Handler of `onUpdatePropertys`."""
        logger.debug(f'[{self}] ({devonly.func_args_values()})')
        entity_id, data = msg.get_values()

        entity: kbeentity.Entity = self._entity_mgr.get_entity(entity_id)
        if entity.CLS_ID == settings.NO_ENTITY_CLS_ID:
            entity.add_pending_msg(msg)
            return OnUpdatePropertysHandlerResult(
                success=True,
                text=f'There is NO entity "{entity_id}". '
                     f'Store the message to handle it in the future.'
            )

        parsed_data = OnUpdatePropertysParsedData(
            entity_id=entity_id,
            properties={}
        )
        entity_desc = descr.entity.DESC_BY_UID[entity.CLS_ID]
        while data:
            if entity_desc.is_optimized_prop_uid:
                component_uid, shift = kbetype.UINT8.decode(data)
                data = data[shift:]
                property_uid, shift = kbetype.UINT8.decode(data)
                data = data[shift:]
            else:
                component_uid, shift = kbetype.UINT16.decode(data)
                data = data[shift:]
                property_uid, shift = kbetype.UINT16.decode(data)
                data = data[shift:]

            prop_id = component_uid or property_uid
            assert prop_id != 0, 'There is NO id of the property'

            type_spec = entity_desc.property_desc_by_id[prop_id]
            value, shift = type_spec.kbetype.decode(data)
            data = data[shift:]

            if isinstance(getattr(entity, type_spec.name), kbeentity.EntityComponent):
                # Это значит,то свойство на самом деле компонент (т.е. отдельный тип)
                ec_data: kbetype.EntityComponentData = value
                comp_desc = descr.entity.DESC_BY_UID[value.component_ent_id]
                while ec_data.count > 0:
                    if comp_desc.is_optimized_prop_uid:
                        _component_uid, shift = kbetype.UINT8.decode(data)
                        data = data[shift:]
                        property_uid, shift = kbetype.UINT8.decode(data)
                        data = data[shift:]
                    else:
                        _component_uid, shift = kbetype.UINT16.decode(data)
                        data = data[shift:]
                        property_uid, shift = kbetype.UINT16.decode(data)
                        data = data[shift:]
                    type_spec = comp_desc.property_desc_by_id[property_uid]
                    v, shift = type_spec.kbetype.decode(data)
                    data = data[shift:]
                    ec_data.properties[type_spec.name] = v
                    ec_data.count -= 1
                    # ec_data is value variable

            parsed_data.properties[type_spec.name] = value

        entity.__update_properties__(parsed_data.properties)

        return OnUpdatePropertysHandlerResult(
            success=True,
            result=parsed_data
        )


@dataclass
class OnCreatedProxiesParsedData(base.ParsedMsgData):
    # After each proxy is created, a uuid is generated by the system,
    # which is used for identification when the front-end re-login
    rnd_uuid: int
    entity_id: int
    cls_name: str  # the class name of the entity


@dataclass
class OnCreatedProxiesHandlerResult(base.HandlerResult):
    success: bool
    result: OnCreatedProxiesParsedData
    msg_id: int = descr.app.client.onCreatedProxies.id
    text: Optional[str] = None


class OnCreatedProxiesHandler(_EntityHandler):

    def handle(self, msg: kbeclient.Message) -> OnCreatedProxiesHandlerResult:
        parsed_data = OnCreatedProxiesParsedData(*msg.get_values())
        try:
            _entity = self._entity_mgr.initialize_entity(
                entity_id=parsed_data.entity_id,
                entity_cls_name=parsed_data.cls_name
            )
        except kbeentity.EntityMgrError as err:
            return OnCreatedProxiesHandlerResult(
                success=False,
                result=parsed_data,
                text=err.args[0]
            )

        return OnCreatedProxiesHandlerResult(
            success=True,
            result=parsed_data
        )


@dataclass
class OnRemoteMethodCallParsedData(base.ParsedMsgData):
    entity_id: int
    method_name: str
    arguments: list


@dataclass
class OnRemoteMethodCallHandlerResult(base.HandlerResult):
    success: bool
    result: OnRemoteMethodCallParsedData
    msg_id: int = descr.app.client.onRemoteMethodCall.id
    text: Optional[str] = None


class OnRemoteMethodCallHandler(_EntityHandler):

    def handle(self, msg: kbeclient.Message) -> OnRemoteMethodCallHandlerResult:
        logger.debug('[%s] %s', self, devonly.func_args_values())
        data: memoryview = msg.get_values()[0]
        entity_id, offset = kbetype.ENTITY_ID.decode(data)
        data = data[offset:]

        entity = self._entity_mgr.get_entity(entity_id)
        entity_desc = descr.entity.DESC_BY_UID[entity.CLS_ID]

        if entity_desc.is_optimized_cl_method_uid:
            # componentPropertyAliasID
            component_prop_id, offset = kbetype.UINT8.decode(data)
            data = data[offset:]
        else:
            component_prop_id, offset = kbetype.UINT16.decode(data)
            data = data[offset:]

        ent_component = None
        if component_prop_id != settings.NO_ID:
            # It's a component remote method call. The call address to
            # the entity property. Get descriptsion of this property.
            comp_prop_desc = entity_desc.property_desc_by_id[component_prop_id]
            ent_component: kbeentity.EntityComponent = getattr(entity, comp_prop_desc.name)
            # It's an instance of the component-entity (e.g "Test" entity in the demo)
            assert ent_component and isinstance(ent_component, kbeentity.EntityComponent)
            entity_desc: EntityDesc = descr.entity.DESC_BY_NAME[ent_component.className()]

        if entity_desc.is_optimized_cl_method_uid:
            method_id, offset = kbetype.UINT8.decode(data)
            data = data[offset:]
        else:
            method_id, offset = kbetype.UINT16.decode(data)
            data = data[offset:]

        method_desc = entity_desc.client_methods[method_id]

        arguments = []
        for kbe_type in method_desc.kbetypes:
            value, offset = kbe_type.decode(data)
            data = data[offset:]
            arguments.append(value)

        if ent_component is None:
            entity.__on_remote_call__(method_desc.name, arguments)
        else:
            ent_component.__on_remote_call__(method_desc.name, arguments)

        parsed_data = OnRemoteMethodCallParsedData(
            entity_id=entity_id,
            method_name=method_desc.name,
            arguments=arguments
        )
        return OnRemoteMethodCallHandlerResult(
            success=True,
            result=parsed_data
        )


@dataclass
class OnEntityDestroyedParsedData(base.ParsedMsgData):
    entity_id: int


@dataclass
class OnEntityDestroyedHandlerResult(base.HandlerResult):
    success: bool
    result: OnEntityDestroyedParsedData
    msg_id: int = descr.app.client.onEntityDestroyed.id
    text: Optional[str] = None


class OnEntityDestroyedHandler(_EntityHandler):

    def handle(self, msg: kbeclient.Message) -> OnEntityDestroyedHandlerResult:
        logger.debug('[%s] %s', self, devonly.func_args_values())
        entity_id = msg.get_values()[0]
        _entity = self._entity_mgr.get_entity(entity_id)
        return OnEntityDestroyedHandlerResult(
            success=True,
            result=OnEntityDestroyedParsedData(entity_id)
        )
